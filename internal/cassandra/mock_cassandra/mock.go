// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cpurta/tatanka/internal/cassandra (interfaces: Client)

// Package mock_cassandra is a generated GoMock package.
package mock_cassandra

import (
	model "github.com/cpurta/tatanka/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetTradesBetween mocks base method
func (m *MockClient) GetTradesBetween(arg0, arg1 time.Time) ([]*model.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradesBetween", arg0, arg1)
	ret0, _ := ret[0].([]*model.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradesBetween indicates an expected call of GetTradesBetween
func (mr *MockClientMockRecorder) GetTradesBetween(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradesBetween", reflect.TypeOf((*MockClient)(nil).GetTradesBetween), arg0, arg1)
}

// InsertTrade mocks base method
func (m *MockClient) InsertTrade(arg0 string, arg1 *model.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTrade", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTrade indicates an expected call of InsertTrade
func (mr *MockClientMockRecorder) InsertTrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTrade", reflect.TypeOf((*MockClient)(nil).InsertTrade), arg0, arg1)
}
